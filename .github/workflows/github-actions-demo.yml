name: GitHub Actions Demo
run-name: ${{ github.actor }} is checking system against assessment image
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Pull and run given Docker image
        run: |
          docker pull mrksdh/assessment
          docker run -d -p 8080:8080 --name assessment-container mrksdh/assessment

      - name: Build local Dockerfile and run container
        run: |
          docker build -t my-local-container -f Dockerfile .
          docker run -d --name local-container --link assessment-container my-local-container

      - name: Wait for containers to be ready
        run: sleep 10  # Optional: Wartezeit von 10 Sekunden, um sicherzustellen, dass die Container bereit sind

      - name: GET request to Assessment Service
        id: get_data
        run: |
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" http://localhost:8080/v1/dataset)
          echo "Response Code: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Fehler beim Abrufen der Daten!"
            exit 1
          fi
          echo "Response data:"
          cat response.json  # Optional: Ausgabe der Antwortdaten

      - name: Prepare and send POST request
        run: |
          # Extrahiere die erforderlichen Informationen aus der Antwort
          CONSUMPTION_RESULT=$(jq '{result: [.events[] | {customerId: .customerId, consumption: (.timestamp - (.timestamp | if .eventType == "start" then 0 else 0 end)} )]} | group_by(.customerId) | map({customerId: .[0].customerId, consumption: map(.consumption) | add})' response.json)

          # Sende die POST-Anfrage
          POST_RESPONSE=$(curl -X POST http://localhost:8080/v1/result -H "Content-Type: application/json" -d "$CONSUMPTION_RESULT")
          echo "Response from POST request: $POST_RESPONSE"

      - name: Verify containers are running
        run: |
          docker ps

      - name: Cleanup
        run: |
          docker stop assessment-container local-container
          docker rm assessment-container local-container
d, 'consumption': consumption})

resultDict = {'result': result}
url = 'http://assessment:8080/v1/result'
headers = {'Content-Type': 'application/json'}
request = requests.post(url=url, json=resultDict, headers=headers)
print('Response Text:', request.text)
" > script.py

          python3 script.py  # Ausf√ºhren des Python-Skripts
