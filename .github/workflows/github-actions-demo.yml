name: GitHub Actions Demo
run-name: ${{ github.actor }} is checking system against assessment image
on: [push]

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Pull and run given Docker image
        run: |
          docker pull mrksdh/assessment
          docker run -d -p 8080:8080 --name assessment-container mrksdh/assessment

      - name: Build local Dockerfile and run container
        run: |
          docker build -t my-local-container -f Dockerfile .
          docker run -d --name local-container --link assessment-container my-local-container

      - name: Wait for containers to be ready
        run: |
          for i in {1..10}; do 
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/v1/dataset)
            if [ "$RESPONSE" -eq 200 ]; then
              echo "Service is up!"
              break
            fi
            echo "Waiting for the service to be available..."
            sleep 5
          done

      - name: GET request to Assessment Service
        id: get_data
        run: |
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" http://localhost:8080/v1/dataset)
          echo "Response Code: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Error fetching data!"
            exit 1
          fi
          echo "Response data:"
          cat response.json  # Optional: Output the response data

      - name: Output response.json for debugging
        run: |
          echo "Contents of response.json:"
          cat response.json

      - name: Prepare and send POST request
        run: |
          # Extract necessary information from the response
          CONSUMPTION_RESULT=$(jq '
            {result: [
              .events[] | 
              {customerId: .customerId, 
               consumption: if .eventType == "stop" then (.timestamp - (.events[] | select(.eventType == "start" and .workloadId == .workloadId).timestamp)) else 0 end}
            ]} | group_by(.customerId) | map({customerId: .[0].customerId, consumption: map(.consumption) | add})
          ' response.json)

          # Send the POST request
          POST_RESPONSE=$(curl -X POST http://localhost:8080/v1/result -H "Content-Type: application/json" -d "$CONSUMPTION_RESULT")
          echo "Response from POST request: $POST_RESPONSE"

      - name: Verify containers are running
        run: |
          docker ps

      - name: Cleanup
        run: |
          docker stop assessment-container local-container
          docker rm assessment-container local-container
