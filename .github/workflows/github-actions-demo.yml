name: GitHub Actions Demo
run-name: ${{ github.actor }} is checking system against assessment image
on: [push]

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and run using Docker Compose
        run: |
          docker-compose up --build -d  # Im Hintergrund ausführen

      - name: Wait for assessment service to be ready
        run: |
          sleep 5  # Wartezeit, um sicherzustellen, dass der Service bereit ist

      - name: Get dataset from assessment service
        run: |
          DATASET=$(curl -s http://assessment:8080/v1/dataset)
          echo "Dataset received: $DATASET"

      - name: Send POST request to assessment container and display response
        run: |
          # Hier wird der Python-Code in einer Datei ausgeführt
          echo "
import requests
import json

url = 'http://assessment:8080/v1/dataset'
response = requests.get(url)
responseAsJson = response.json()
data = responseAsJson
print(data)

dictornaryForCalculation = {}
dictornaryTotal = {}
arr = []
data['events'] = sorted(data['events'], key=lambda x: x['timestamp'])

for i in data['events']:
    customer = i['customerId']
    workload = i['workloadId']
    timestamp = i['timestamp']
    eventType = i['eventType']
    arr.append(customer)

    if customer not in dictornaryForCalculation:
        dictornaryForCalculation[customer] = {}

    if eventType == 'start':
        dictornaryForCalculation[customer][workload] = timestamp
    elif eventType == 'stop':
        if workload in dictornaryForCalculation[customer]:
            start_time = dictornaryForCalculation[customer][workload]
            runtime = timestamp - start_time
            dictornaryTotal[customer] = dictornaryTotal.get(customer, 0) + runtime
            del dictornaryForCalculation[customer][workload]

result = []
for customerId, consumption in dictornaryTotal.items():
    result.append({'customerId': customerId, 'consumption': consumption})

resultDict = {'result': result}
url = 'http://assessment:8080/v1/result'
headers = {'Content-Type': 'application/json'}
request = requests.post(url=url, json=resultDict, headers=headers)
print('Response Text:', request.text)
" > script.py

          python3 script.py  # Ausführen des Python-Skripts
